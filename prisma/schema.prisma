// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  name           String
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  RoleUser       RoleUser[]
  PermissionUser PermissionUser[]
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String?
  RoleUser       RoleUser[]
  PermissionRole PermissionRole[]
  PermissionUser PermissionUser[]
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String?
  PermissionRole PermissionRole[]
}

model RoleUser {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model PermissionRole {
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int

  @@id([permissionId, roleId])
}

model PermissionUser {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}
